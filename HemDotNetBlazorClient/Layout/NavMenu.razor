<!--

Author: Allan

-->
@using HemDotNetBlazorClient.Providers
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient httpClient
@inject ApiAuthenticationStateProvider AuthStateProvider

<nav class="navbar navbar-expand-lg navbar-dark bg-primary w-100 shadow-sm align-text-baseline align-items-baseline">
    <div class="container">
        <a class="navbar-brand d-flex align-items-baseline" href="#">
            <img src="logo.svg" alt="Logo" style="height: 36px; padding-bottom: 2px;" />
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarMain"
                aria-controls="navbarMain" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-between" id="navbarMain">
            <!-- left -->
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link text-white" href="#">Sök bostad</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="#">Sök mäklare</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link text-white" href="#">Sök mäklarbyrå</a>
                </li>
            </ul>
            <!-- right -->
            <ul class="navbar-nav">
                @if (!isLoggedIn)
                {
                    <li class="nav-item">
                        <a href="users/login" class="btn btn-outline-light me-2">Logga in</a>
                    </li>
                }
                else
                {
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="profileDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <img src="@($"{httpClient.BaseAddress}{userProfileImage}")" class="rounded-circle me-2" width="32" height="32" alt="Profile" />
                            <span class="text-white">Min profil</span>
                        </a>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="/agent/manage-properties">Hantera MarketProperties</a></li>
                            <li><a class="dropdown-item" href="@($"users/profile/{userId}")">Visa/Redigera profil</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="users/logout">Logga ut</a></li>
                        </ul>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>


@code {
    private bool isLoggedIn = false;
    private string userId;
    private string userProfileImage = "Images/DefaultProfilePicture.png"; // Default profile image path

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst("uid")?.Value;

        isLoggedIn = userId != null;

        // ex: userProfileImage = await userService.GetProfileImageUrl(userId);
    }
}

@implements IDisposable
@code {
    private AuthenticationStateChangedHandler _authHandler;

    protected override void OnInitialized()
    {
        _authHandler = (taskAuthState) =>
        {
            InvokeAsync(async () =>
            {
                // Re-check authentication and update state
                var authState = await taskAuthState;
                var user = authState.User;
                userId = user.FindFirst("uid")?.Value;
                isLoggedIn = userId != null;

                // Force UI update
                StateHasChanged();
            });
        };

        // Subscribe to authentication state changes
        AuthStateProvider.AuthenticationStateChanged += _authHandler;
    }

    public void Dispose()
    {
        // Unsubscribe when component is disposed
        if (_authHandler != null)
        {
            AuthStateProvider.AuthenticationStateChanged -= _authHandler;
        }
    }
}