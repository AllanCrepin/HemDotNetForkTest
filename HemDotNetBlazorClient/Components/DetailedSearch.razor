<!--

Author: Allan

-->

@inject IMunicipalityService municipalityService
@inject IMarketPropertyService marketPropertyService
@using System.Timers
@using HemDotNetBlazorClient.Services.Base

<style>
    .list-group-item:hover {
    background-color: #f1f1f1;
    cursor: pointer;
    }

    .position-absolute {
    position: absolute;
    background-color: white;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
    }

    /*
    .hero-section {
    background-image: url('pexels-neighborhood.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    height: 100vh;
    width: 100%;
    color: white;
    }
    */
</style>

<!--Allan-->
<div class="hero-section container-fluid col-xxl-8 bg-light text-dark py-5">
    <div class="container bg-white rounded py-5 px-5">
        <div class="row flex-lg-row-reverse align-items-center g-5 py-3">
            <div class="col-12 col-sm-8 col-lg-6 border rounded py-3 shadow">
                <h4 class="mb-4">Sök bostäder</h4>
                <div class="mb-3">
                    <label for="areaInput" class="form-label">Område</label>
                    <input type="text"
                    class="form-control"
                    id="areaInput"
                    placeholder="Ange ort eller kommun"
                    value="@searchTerm"
                    @oninput="OnSearchTermChanged" />
                    @if (suggestions.Any())
                    {
                        <ul class="list-group mt-2 position-absolute w-100" style="max-height: 300px; overflow-y: auto; z-index: 100;">
                            @foreach (var suggestion in suggestions)
                            {
                                <li class="list-group-item" @onclick="() => SelectSuggestion(suggestion)">
                                    @DisplayMatchedText(suggestion)
                                </li>
                            }
                        </ul>
                    }
                </div>

                <div class="mb-3">
                    <label class="form-label">Typ</label>
                    <div class="btn-group d-flex flex-wrap gap-2" role="group">
                        <button type="button"
                        class="btn btn-outline-primary @(searchModel.ShowAllTypes ? "active" : "")"
                        @onclick="ToggleAllTypes">
                            Alla typer
                        </button>
                        @foreach (PropertyCategory type in Enum.GetValues(typeof(PropertyCategory)))
                        {
                            <button type="button"
                            class="btn btn-outline-primary @((searchModel.SelectedTypes.Contains(type) ? "active" : ""))"
                            @onclick="() => ToggleType(type)">
                                @GetPropertyCategoryDisplayName(type)
                            </button>
                        }
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Minst antal rum</label>
                        <select class="form-select shadow-sm border-primary rounded-3 fw-semibold text-dark w-100" @bind="searchModel.MinRooms">
                            <option value="">Alla</option>
                            @for (int i = 1; i <= 6; i++)
                            {
                                <option value="@i">@i+</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Minsta boarea</label>
                        <select class="form-select shadow-sm border-primary rounded-3 fw-semibold text-dark w-100" @bind="searchModel.MinArea">
                            <option value="">Alla</option>
                            @for (int i = 20; i <= 200; i += 20)
                            {
                                <option value="@i">@i m²</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Högst pris</label>
                        <select class="form-select shadow-sm border-primary rounded-3 fw-semibold text-dark w-100" @bind="searchModel.MaxPrice">
                            <option value="">Inget</option>
                            @foreach (var price in new[] { 1000000, 2000000, 3000000, 5000000 })
                            {
                                <option value="@price">@($"{price:N0} kr")</option>
                            }
                        </select>
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label">Nyproduktion</label>
                        <select class="form-select shadow-sm border-primary rounded-3 fw-semibold text-dark w-100" @bind="searchModel.NewProduction">
                            <option value="true">Visa nyproduktion</option>
                            <option value="false">Dölj nyproduktion</option>
                        </select>
                    </div>
                </div>

                <button class="btn btn-primary w-100" @onclick="Search">Hitta bostäder till salu</button>
            </div>

            <div class="col-lg-6">
                <h1 class="display-5 fw-bold text-body-emphasis lh-1 mb-3">Hitta din drömbostad hos oss, <b class="text-primary">gratis.</b></h1>
                <p class="lead">Vi hjälper dig att hitta den perfekta bostaden som passar både dina behov och din budget. Utforska vårt breda utbud och hitta något som passar just dig.</p>
                <div class="d-grid gap-4">
                    <button type="button" class="btn btn-primary btn-lg px-4">Alla bostäder</button>
                    <button type="button" class="btn btn-outline-secondary btn-lg px-4">Läs mer</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string searchTerm;
    private List<string> suggestions = new();
    private Timer debounceTimer;

    // Allan
    protected override void OnInitialized()
    {
        debounceTimer = new Timer(100);
        debounceTimer.Elapsed += async (s, e) => await InvokeAsync(PerformSearch);
        debounceTimer.AutoReset = false;
    }

    // Allan
    private void OnInputChanged()
    {
        debounceTimer.Stop();
        debounceTimer.Start();
    }

    // Allan
    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            suggestions.Clear();
        }
        else
        {
            var response = await municipalityService.MunicipalitiesSearch(searchTerm);

            if (response != null && response.Data != null)
            {
                suggestions = response.Data
                    .Select(m => m.Name)
                    .ToList();
            }
            else
            {
                suggestions = new List<string>();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    // Allan
    private void SelectSuggestion(string selected)
    {
        searchTerm = selected;
        suggestions.Clear();
    }

    // Allan
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString();
        OnInputChanged();
    }


    // Allan
    private string HighlightSubstring(string input, string search)
    {
        if (string.IsNullOrEmpty(search))
            return input;

        var index = input.IndexOf(search, StringComparison.OrdinalIgnoreCase);
        if (index == -1)
            return input;

        return input.Substring(0, index) +
               "<strong>" + input.Substring(index, search.Length) + "</strong>" +
               input.Substring(index + search.Length);
    }

    // Allan
    private MarkupString DisplayMatchedText(string suggestion)
    {
        var highlightedText = HighlightSubstring(suggestion, searchTerm);
        return new MarkupString(highlightedText);
    }

    private SearchModel searchModel = new();

    // Allan
    private string GetPropertyCategoryDisplayName(PropertyCategory category)
    {
        return category switch
        {
            PropertyCategory.Villa => "Villa",
            PropertyCategory.CondominiumApartment => "Lägenhet",
            PropertyCategory.CondominiumTownhouse => "Radhus",
            PropertyCategory.VacationHome => "Fritidshus",
            _ => category.ToString()
        };
    }

    // Allan
    private void ToggleAllTypes()
    {
        searchModel.ShowAllTypes = !searchModel.ShowAllTypes;
        if (searchModel.ShowAllTypes)
        {
            searchModel.SelectedTypes.Clear();
        }
    }


    // Allan
    private void ToggleType(PropertyCategory type)
    {
        searchModel.ShowAllTypes = false;

        if (searchModel.SelectedTypes.Contains(type))
            searchModel.SelectedTypes.Remove(type);
        else
            searchModel.SelectedTypes.Add(type);
    }

    // Allan
    private async Task Search()
    {
        var searchDto = new MarketPropertySearchDto
            {
                Area = searchTerm,
                SelectedTypes = searchModel.ShowAllTypes ? null : searchModel.SelectedTypes,
                MinRooms = string.IsNullOrEmpty(searchModel.MinRooms) ? null : int.Parse(searchModel.MinRooms),
                MinArea = string.IsNullOrEmpty(searchModel.MinArea) ? null : double.Parse(searchModel.MinArea),
                MaxPrice = string.IsNullOrEmpty(searchModel.MaxPrice) ? null : double.Parse(searchModel.MaxPrice),
                NewProduction = bool.Parse(searchModel.NewProduction)
            };

        try
        {
            //var response = await Http.PostAsJsonAsync("api/MarketProperty/search", searchDto);
            var response = await marketPropertyService.SearchMarketProperties(searchDto);
            Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(response.Data, new System.Text.Json.JsonSerializerOptions
                {
                    WriteIndented = true
                }));
            /*
            if (response.IsSuccessStatusCode)
            {
                var properties = await response.Content.ReadFromJsonAsync<List<MarketProperty>>();
                // Do something with 'properties', for example, display the search results
            }
            else
            {
                // Handle error or show "No properties found"
            }
            */
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching properties: {ex.Message}");
        }
    }

    public class SearchModel
    {
        public string Area { get; set; } = "";
        public HashSet<PropertyCategory> SelectedTypes { get; set; } = new();
        public bool ShowAllTypes { get; set; } = true;
        public string MinRooms { get; set; } = "";
        public string MinArea { get; set; } = "";
        public string MaxPrice { get; set; } = "";
        public string NewProduction { get; set; } = "true";
        public string Keywords { get; set; } = "";
    }
    /*
    public class MarketPropertySearchDto
    {
        public string Area { get; set; }
        public ICollection<PropertyCategory> SelectedTypes { get; set; }
        public int? MinRooms { get; set; }
        public double? MinArea { get; set; }
        public double? MaxPrice { get; set; }
        public bool NewProduction { get; set; }
    }
    */
}