@page "/users/register"
@inject IClient httpClient
@inject NavigationManager navManager

@* Coder: Adam, Participants: All *@
@* Co-author: Allan (style, error messages, no real estate agency selection) *@

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Registrera nytt konto</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-danger" role="alert">
                            @message
                        </div>
                    }

                    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group mb-3">
                            <label for="email" class="form-label">E-postadress</label>
                            <InputText id="email" class="form-control" @bind-Value="RegistrationModel.Email" />
                            <ValidationMessage For="@(() => RegistrationModel.Email)" class="text-danger" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="phoneNumber" class="form-label">Telefonnummer</label>
                            <InputText id="phoneNumber" class="form-control" @bind-Value="RegistrationModel.PhoneNumber" />
                            <ValidationMessage For="@(() => RegistrationModel.PhoneNumber)" class="text-danger" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="firstName" class="form-label">Förnamn</label>
                            <InputText id="firstName" class="form-control" @bind-Value="RegistrationModel.FirstName" />
                            <ValidationMessage For="@(() => RegistrationModel.FirstName)" class="text-danger" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="lastName" class="form-label">Efternamn</label>
                            <InputText id="lastName" class="form-control" @bind-Value="RegistrationModel.LastName" />
                            <ValidationMessage For="@(() => RegistrationModel.LastName)" class="text-danger" />
                        </div>
                        <div class="form-group mb-3">
                            <label for="password" class="form-label">Lösenord</label>
                            <InputText id="password" class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
                            <ValidationMessage For="@(() => RegistrationModel.Password)" class="text-danger" />
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Registrera dig</button>
                        </div>
                    </EditForm>
                </div>
                <div class="card-footer text-center">
                    <a href="/users/login">Har du redan ett konto? Logga in här</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    RealEstateAgentRegisterDto RegistrationModel = new RealEstateAgentRegisterDto();
    private string message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            NavigateToLogin();
        }
        catch (ApiException aex)
        {
            if (aex.StatusCode >= 200 && aex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = GetCustomErrorMessage(aex.Response);
        }
    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("/users/login");
    }

    // Allan
    // This is an ugly, ugly hack. But lack of time, and I don't know how to make the error messages
    // more user friendly otherwise.
    private string GetCustomErrorMessage(string apiErrorMessage)
    {

        if (apiErrorMessage.Contains("username", StringComparison.OrdinalIgnoreCase))
        {
            return "E-postadressen används redan. Vänligen använd en annan e-postadress eller logga in.";
        }

        if (apiErrorMessage.Contains("password", StringComparison.OrdinalIgnoreCase))
        {
            return "Lösenordet uppfyller inte säkerhetskraven. Vänligen välj ett starkare lösenord.";
        }

        return "Det uppstod ett fel. Vänligen kontrollera alla fält och försök igen.";
    }
}