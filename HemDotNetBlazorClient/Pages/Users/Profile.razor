@page "/users/profile/{Id}"
@inject IRealEstateAgentService realEstateAgentService
@inject IMarketPropertyService marketPropertyService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient httpClient

@using Microsoft.AspNetCore.Components.Authorization


@*Author: Allan *@


@*Navigate to this page from another with the right id through:

string id = "";
var escapedId = Uri.EscapeDataString(id);
NavigationManager.NavigateTo($"/users/profile/{escapedId}");

The id is "escaped" beforehand because it will contain "-"
*@



@if (agent == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 300px;">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Laddar...</span>
        </div>
        <span class="ms-3 text-muted">Laddar mäklarinformation...</span>
    </div>
}
else
{
    <div class="container py-4">
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-body p-0">
                <div class="row g-0">
                    <div class="col-md-4 text-center p-4 bg-light">
                        <div class="position-relative mb-4">
                            <img src="@($"{httpClient.BaseAddress}{agent.RealEstateAgentImageUrl}")"
                                 class="img-fluid rounded-circle shadow border border-3 border-white"
                                 alt="@agent.RealEstateAgentFirstName @agent.RealEstateAgentLastName"
                                 style="width: 180px; height: 180px; object-fit: cover;" />
                        </div>
                        <h4 class="fw-bold mb-1">@agent.RealEstateAgentFirstName @agent.RealEstateAgentLastName</h4>
                        <p class="text-muted mb-3">Fastighetsmäklare</p>

                        @if (isCurrentUser)
                        {
                            <button class="btn btn-primary w-100 mb-3" @onclick="NavigateToEdit">
                                <i class="bi bi-pencil-square me-2"></i>Redigera profil
                            </button>
                        }
                    </div>
                    <div class="col-md-8 p-4">
                        <h5 class="text-primary mb-4">Kontaktinformation</h5>

                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-light p-2 rounded-circle me-3">
                                <i class="bi bi-building text-primary"></i>
                            </div>
                            <div>
                                <div class="text-muted small">Företag</div>
                                <div class="fw-medium">@agent.RealEstateAgentAgencyName</div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center mb-3">
                            <div class="bg-light p-2 rounded-circle me-3">
                                <i class="bi bi-telephone text-primary"></i>
                            </div>
                            <div>
                                <div class="text-muted small">Telefon</div>
                                <div class="fw-medium">@agent.RealEstateAgentPhoneNumber</div>
                            </div>
                        </div>

                        <div class="d-flex align-items-center">
                            <div class="bg-light p-2 rounded-circle me-3">
                                <i class="bi bi-envelope text-primary"></i>
                            </div>
                            <div>
                                <div class="text-muted small">E-post</div>
                                <div class="fw-medium">@agent.RealEstateAgentEmail</div>
                            </div>
                        </div>

                        <hr class="my-4">

                        <div class="d-flex gap-2">
                            <a href="#propertyListings" class="btn btn-sm btn-outline-secondary">
                                <i class="bi bi-house me-1"></i>@(agentProperties?.Count ?? 0) aktiva objekt
                            </a>
                            <a href="#" class="btn btn-sm btn-outline-secondary">
                                <i class="bi bi-calendar-check me-1"></i>Boka visning
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id="propertyListings">
            @if (isLoadingProperties)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Laddar objekt...</span>
                    </div>
                    <p class="mt-2 text-muted">Laddar mäklarens objekt...</p>
                </div>
            }
            else if (agentProperties == null || !agentProperties.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>Mäklaren har inga aktiva objekt för tillfället.
                </div>
            }
            else
            {
                <h3 class="fw-bold mb-4">Mäklaren har @agentProperties.Count aktiva objekt</h3>
                <div class="container pt-5">
                    <div class="d-flex flex-column align-items-center py-5">
                        @foreach (var property in agentProperties)
                        {
                            <PropertyCard Property="property" />
                        }
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public string Id { get; set; }

    private RealEstateAgentDto agent;
    private List<PartialMarketPropertyDTO> agentProperties;
    private bool isCurrentUser = false;
    private bool isLoadingProperties = true;

    protected override async Task OnInitializedAsync()
    {
        // Get agent information
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var response = await realEstateAgentService.GetAgentByIdAsync(Id);

        if (response?.Success == true)
        {
            agent = response.Data;
            isCurrentUser = user.Identity?.IsAuthenticated == true &&
                           user.Identity.Name == agent.RealEstateAgentEmail;

            // Load agent's properties
            await LoadAgentProperties();
        }
    }

    private async Task LoadAgentProperties()
    {
        isLoadingProperties = true;

        try
        {
            // Check if the agent has any property IDs
            if (agent?.PropertyIds != null && agent.PropertyIds.Any())
            {
                // Get properties by IDs
                var propertiesResponse = await marketPropertyService.GetMarketPropertiesByAgent(agent.Id);

                if (propertiesResponse?.Success == true)
                {
                    agentProperties = propertiesResponse.Data;
                }
                else
                {
                    // Handle error
                    agentProperties = new List<PartialMarketPropertyDTO>();
                }
            }
            else
            {
                agentProperties = new List<PartialMarketPropertyDTO>();
            }
        }
        catch (Exception ex)
        {
            // Log error if needed
            agentProperties = new List<PartialMarketPropertyDTO>();
        }
        finally
        {
            isLoadingProperties = false;
            StateHasChanged();
        }
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/users/profile/edit/{Id}");
    }
}