@*Author: Allan*@
@using HemDotNetBlazorClient.Components
@using HemDotNetBlazorClient.Services
@using Microsoft.AspNetCore.Authorization
@page "/admin/manage-agents"
@inject IRealEstateAgentService realEstateAgentService
@inject IRealEstateAgencyService realEstateAgencyService
@inject HttpClient httpClient
@attribute [Authorize(Roles = "Administrator")]
<div class="mx-auto" style="width:1000px; margin-bottom:5rem;">
    <h3 class="pt-5 text-center">Hantera mäklare</h3>
    @if (!response.Success)
    {
        <div class="alert alert-danger">
            <h4>@response.Message</h4>
        </div>
    }
    else if (realEstateAgents == null)
    {
        <div class="alert alert-info">
            <h4>Loading data...</h4>
        </div>
    }
    else
    {
        <div class="col-auto agentCards vstack"
             style="gap:1rem;">
            @foreach (var agent in realEstateAgents)
            {
                <div class="agentCard card mb-3">
                    <div class="card-body d-flex justify-content-between align-items-center gap-4">
                        <div class="userInfo d-flex gap-4 align-items-center col-6">
                            <img class="img-thumbnail rounded-circle" style="width: 150px;"
                                 src="@($"{httpClient.BaseAddress}{agent.RealEstateAgentImageUrl}")"
                                 alt="@($"{agent.RealEstateAgentFirstName} profilepic")" />
                            <div class="vstack justify-content-center">
                                <h5 class="card-title">@agent.RealEstateAgentFirstName @agent.RealEstateAgentLastName</h5>
                                <div>@agent.RealEstateAgencyMunicipality</div>
                                <small>@agent.RealEstateAgentEmail</small>
                                <small>@agent.RealEstateAgentPhoneNumber</small>
                            </div>
                        </div>
                        <div class="agencyInfo text-center d-flex flex-column align-items-center col-4">
                            <img class="img" style="width: 100px;"
                                 src="@($"{httpClient.BaseAddress}{agent.RealEstateAgencyLogoUrl}")"
                                 alt="@($"{agent.RealEstateAgentAgencyName} logo")" />
                            <div class="font-weight-bold">@agent.RealEstateAgentAgencyName</div>

                            @if (agencies != null)
                            {
                                <div class="mt-3 w-100">
                                    <select class="form-select" value="@agent.RealEstateAgentAgencyId"
                                            @onchange="@(e => UpdateAgentAgency(agent.Id, Convert.ToInt32(e.Value)))">
                                        @foreach (var agency in agencies)
                                        {
                                            <option value="@agency.RealEstateAgencyId" selected="@(agency.RealEstateAgencyId == agent.RealEstateAgentAgencyId)">
                                                @agency.AgencyName
                                            </option>
                                        }
                                    </select>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showNotification)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header @(updateSuccess ? "bg-success text-white" : "bg-danger text-white")">
                <strong class="me-auto">@(updateSuccess ? "Success" : "Error")</strong>
                <button type="button" class="btn-close" @onclick="CloseNotification"></button>
            </div>
            <div class="toast-body">
                @notificationMessage
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<RealEstateAgentDto> realEstateAgents;
    private IEnumerable<AgencyNameDto> agencies;
    private Response<IEnumerable<RealEstateAgentDto>> response = new Response<IEnumerable<RealEstateAgentDto>> { Success = true };
    private bool showNotification = false;
    private bool updateSuccess = false;
    private string notificationMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAgents();
        await LoadAgencies();
    }

    private async Task LoadAgents()
    {
        response = await realEstateAgentService.GetAgentsAsync("", "", "", "", "", "");
        if (response.Success)
        {
            realEstateAgents = response.Data
            .OrderByDescending(a => a.RealEstateAgentAgencyName == "Wait list")
            .ThenBy(a => a.Id)
            .ToList();
        }
    }

    private async Task LoadAgencies()
    {
        var agencyResponse = await realEstateAgencyService.GetAllAgencies();
        if (agencyResponse.Success)
        {
            agencies = agencyResponse.Data.OrderBy(a => a.AgencyName).ToList();
        }
    }

    private async Task UpdateAgentAgency(string agentId, int newAgencyId)
    {
        try
        {
            var agent = realEstateAgents.FirstOrDefault(a => a.Id == agentId);
            if (agent != null)
            {
                var updateResponse = await realEstateAgentService.UpdateAgentAgencyAsync(agentId, newAgencyId);

                if (updateResponse.Success)
                {
                    // Refresh the agent list
                    await LoadAgents();
                    ShowNotification("Agent's agency updated successfully!", true);
                }
                else
                {
                    ShowNotification($"Failed to update agent's agency: {updateResponse.Message}", false);
                }
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"An error occurred: {ex.Message}", false);
        }
    }

    private void ShowNotification(string message, bool success)
    {
        notificationMessage = message;
        updateSuccess = success;
        showNotification = true;
        StateHasChanged();

        // Automatically hide the notification after 5 seconds
        Task.Delay(5000).ContinueWith(_ =>
        {
            CloseNotification();
            StateHasChanged();
        });
    }

    private void CloseNotification()
    {
        showNotification = false;
        StateHasChanged();
    }
}