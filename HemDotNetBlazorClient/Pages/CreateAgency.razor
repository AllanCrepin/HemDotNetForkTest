@page "/admin/create-agency"
@inject IRealEstateAgencyService realEstateAgencyService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient httpClient

@inject IMunicipalityService municipalityService
@inject NavigationManager navigationManager
@using System.Timers


@attribute [Authorize(Roles = "Administrator")]

@*Author: Allan*@

<style>
    .list-group-item:hover {
        background-color: #f1f1f1;
        cursor: pointer;
    }

    .position-absolute {
        position: absolute;
        background-color: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        width: auto;
        min-width: 100%;
        max-width: none;
        left: 0;
        z-index: 100;
    }

    .autocomplete-container {
        position: relative;
    }

    .autocomplete-dropdown {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        z-index: 100;
    }
</style>

<AuthorizeView Roles="Administrator">
    <Authorized Context="auth">
        @if (isLoading)
        {
            <div class="d-flex flex-column align-items-center justify-content-center my-5 py-5">
                <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                    <span class="visually-hidden">Laddar...</span>
                </div>
                <p class="mt-4 text-muted fs-5">Förbereder formuläret...</p>
            </div>
        }
        else
        {
            <div class="container w-75 mt-5">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-primary text-white py-3">
                        <h4 class="mb-0"><i class="bi bi-building me-2"></i>Skapa en ny mäklarbyrå</h4>
                    </div>
                    <div class="card-body p-4">
                        <EditForm Model="agencyModel" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger d-flex align-items-center mb-4" role="alert">
                                    <i class="bi bi-exclamation-circle-fill me-2"></i>
                                    <div>@errorMessage</div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success d-flex align-items-center mb-4" role="alert">
                                    <i class="bi bi-check-circle-fill me-2"></i>
                                    <div>@successMessage</div>
                                </div>
                            }

                            <div class="row">
                                <div class="col-md-4 mb-4 text-center">
                                    <div class="profile-image-container mb-3">
                                        @if (!string.IsNullOrEmpty(uploadedImageUrl))
                                        {
                                            <img src="@($"{httpClient.BaseAddress}{uploadedImageUrl}")" alt="Agency Logo" class="img-thumbnail rounded shadow-sm" style="width: 180px; height: 180px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <div class="placeholder-image rounded bg-light d-flex align-items-center justify-content-center shadow-sm" style="width: 180px; height: 180px; margin: 0 auto;">
                                                <i class="bi bi-building text-secondary" style="font-size: 4rem;"></i>
                                            </div>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        <label for="agencyLogo" class="form-label fw-bold">Logotyp</label>
                                        <div class="input-group">
                                            <InputFile id="agencyLogo" OnChange="HandleImageChange" class="form-control" />
                                            <label class="input-group-text" for="agencyLogo">
                                                <i class="bi bi-upload"></i>
                                            </label>
                                        </div>
                                        <div class="form-text">Rekommenderad storlek: 500x500 px</div>
                                    </div>
                                </div>

                                <div class="col-md-8">
                                    <ValidationSummary class="text-danger mb-4" />

                                    <div class="mb-3">
                                        <label class="form-label fw-bold">Byrånamn</label>
                                        <InputText class="form-control" @bind-Value="agencyModel.RealEstateAgencyName" placeholder="Ange namn på byrån" />
                                    </div>

                                    <div class="autocomplete-container mb-3">
                                        <label class="form-label fw-bold">Kommun</label>
                                        <InputText class="form-control" @bind-Value="@searchTerm" @oninput="OnSearchTermChanged" placeholder="Ange kommun" />

                                        @if (suggestions.Any())
                                        {
                                            <ul class="list-group mt-2 autocomplete-dropdown">
                                                @foreach (var suggestion in suggestions)
                                                {
                                                    <li class="list-group-item" @onclick="() => SelectSuggestion(suggestion)">
                                                        @DisplayMatchedText(suggestion)
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </div>

                                    <div class="mb-4">
                                        <label class="form-label fw-bold">Presentation</label>
                                        <InputTextArea class="form-control" @bind-Value="agencyModel.RealEstateAgencyPresentation" rows="4" placeholder="Beskriv din mäklarbyrå" />
                                    </div>
                                </div>
                            </div>

                            <hr class="my-4" />

                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-outline-secondary px-4" @onclick="GoBack">
                                    <i class="bi bi-x-lg me-2"></i>Avbryt
                                </button>
                                <button type="submit" class="btn btn-primary px-4">
                                    <i class="bi bi-plus-lg me-2"></i>Skapa Byrå
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>



@code {
    private AgencyCreateDto agencyModel = new();
    private IBrowserFile logoFile;
    private string uploadedImageUrl;
    private string successMessage;
    private string errorMessage;
    private bool isLoading = true;

    // Allan
    protected override Task OnInitializedAsync()
    {
        isLoading = false;
        return Task.CompletedTask;
    }

    // Allan
    private async Task HandleValidSubmit()
    {
        errorMessage = string.Empty;

        if (logoFile != null)
        {
            string extension = Path.GetExtension(logoFile.Name).ToLowerInvariant();
            if (extension != ".jpg" && extension != ".jpeg" && extension != ".png")
            {
                errorMessage = "Endast JPG-, JPEG- och PNG-filer är tillåtna";
                return;
            }
        }

        var result = await realEstateAgencyService.CreateAgency(agencyModel);

        if (result?.Success != true)
        {
            errorMessage = result?.Message ?? "Ett fel uppstod vid skapandet.";
            return;
        }

        if (logoFile != null)
        {
            var fileContent = new StreamContent(logoFile.OpenReadStream(5 * 1024 * 1024));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(logoFile.ContentType);

            var uploadResponse = await realEstateAgencyService.UploadAgencyImage(result.Data, fileContent);

            if (uploadResponse?.Success != true)
            {
                errorMessage = uploadResponse?.Message ?? "Fel vid uppladdning av logotyp.";
            }
        }

        NavigationManager.NavigateTo("/admin/manage-agencies");
    }


    // Allan
    private void HandleImageChange(InputFileChangeEventArgs e)
    {
        logoFile = e.File;
    }

    // Allan
    private void GoBack()
    {
        NavigationManager.NavigateTo("/agencies");
    }



    private string searchTerm;
    private List<string> suggestions = new();
    private Timer debounceTimer;

    // Allan
    protected override void OnInitialized()
    {
        debounceTimer = new Timer(100);
        debounceTimer.Elapsed += async (s, e) => await InvokeAsync(PerformSearch);
        debounceTimer.AutoReset = false;

    }

    // Allan
    private void OnInputChanged()
    {
        debounceTimer.Stop();
        debounceTimer.Start();
    }

    // Allan
    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            suggestions.Clear();
        }
        else
        {
            var response = await municipalityService.MunicipalitiesSearch(searchTerm);

            if (response != null && response.Data != null)
            {
                suggestions = response.Data
                    .Select(m => m.Name)
                    .ToList();
            }
            else
            {
                suggestions = new List<string>();
            }
        }
        await InvokeAsync(StateHasChanged);
    }

    // Allan
    private void SelectSuggestion(string selected)
    {
        searchTerm = selected;
        agencyModel.RealEstateAgencyMunicipality = selected;
        suggestions.Clear();
    }


    // Allan
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString();
        agencyModel.RealEstateAgencyMunicipality = searchTerm;
        OnInputChanged();
    }

    // Allan
    private string HighlightSubstring(string input, string search)
    {
        if (string.IsNullOrEmpty(search))
            return input;

        var index = input.IndexOf(search, StringComparison.OrdinalIgnoreCase);
        if (index == -1)
            return input;

        return input.Substring(0, index) +
               "<strong>" + input.Substring(index, search.Length) + "</strong>" +
               input.Substring(index + search.Length);
    }

    // Allan
    private MarkupString DisplayMatchedText(string suggestion)
    {
        var highlightedText = HighlightSubstring(suggestion, searchTerm);
        return new MarkupString(highlightedText);
    }

}