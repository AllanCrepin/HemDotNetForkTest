@page "/MarketProperty/{MarketPropertyId:int}/Images"
@using System.IO
@inject IPropertyImageService PropertyImageService
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

@* Author: Allan *@

<style>
    .image-container {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    margin-bottom: 15px;
    position: relative;
    height: 200px;
    }

    .property-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    }

    .image-container:hover .property-image {
    transform: scale(1.02);
    }

    .image-delete-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    opacity: 0.7;
    transition: opacity 0.3s ease;
    border-radius: 10%;
    width: 32px;
    height: 32px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    }

    .image-delete-btn:hover {
    opacity: 1;
    }

    .trash-icon {
    width: 16px;
    height: 16px;
    }
</style>

<div class="container my-4">
    <h3>Lägg till eller ta bort bilder.</h3>
    <div id="notificationArea" style="min-height: 60px;">
        @if (!string.IsNullOrEmpty(notificationMessage))
        {
            <div class="alert @notificationClass alert-dismissible fade show" role="alert">
                @notificationMessage
            </div>
        }
    </div>

    @if (loading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    else
    {
        @if (images != null && images.Any())
        {
            <div class="row g-3">
                @foreach (var image in images)
                {
                    <div class="col-md-4 col-lg-3">
                        <div class="image-container">
                            <img src="@($"{httpClient.BaseAddress}{image.ImageUrl}")" class="property-image" alt="Property image" />
                            <button class="btn btn-sm btn-danger image-delete-btn" @onclick="() => DeleteImage(image.PropertyImageId)">
                                <img src="trash.svg" alt="Delete" class="trash-icon" />
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info">Det här objektet saknar bilder</div>
        }
    }

    <div class="mt-4">
        <ImageUploadComponent 
        IsLoading="@uploadLoading" 
        OnFileSelected="@OnInputFileChange" />
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="GoBack">Visa objektet</button>
    </div>
</div>

@code {
    [Parameter]
    public int MarketPropertyId { get; set; }

    private List<PropertyImageDto> images;
    private bool loading = true;
    private bool uploadLoading = false;
    private string errorMessage;

    // Notification properties
    private string notificationMessage;
    private string notificationClass;
    private System.Threading.Timer notificationTimer;

    // Allan
    protected override async Task OnInitializedAsync()
    {
        await LoadImages();
    }

    // Allan
    private async Task LoadImages()
    {
        loading = true;
        errorMessage = null;

        try
        {
            var response = await PropertyImageService.GetPropertyImages(MarketPropertyId);

            if (response.Success)
            {
                images = response.Data;
            }
            else
            {
                //errorMessage = response.Message;
                errorMessage = "Bara inloggade användare som har tillgång till objektet får lägga till eller ta bort bilder.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading images: {ex.Message}";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    // Allan
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            uploadLoading = true;

            var file = e.File;
            if (file == null)
            {
                ShowNotification("Ingen fil har valts.", "error");
                return;
            }

            if (file.Size > 5 * 1024 * 1024)
            {
                ShowNotification("Filstorleken överstiger gränsen på 5 MB", "error");
                return;
            }

            string extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (extension != ".jpg" && extension != ".jpeg" && extension != ".png")
            {
                ShowNotification("Endast JPG-, JPEG- och PNG-filer är tillåtna", "error");
                return;
            }

            var fileContent = new StreamContent(file.OpenReadStream(5 * 1024 * 1024));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

            var response = await PropertyImageService.AddPropertyImage(MarketPropertyId, fileContent);

            if (response.Success)
            {
                ShowNotification("Bilden har laddats upp", "success");
                await LoadImages();
            }
            else
            {
                ShowNotification(response.Message ?? "Fel vid uppladdning av bild", "error");
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Error: {ex.Message}", "error");
        }
        finally
        {
            uploadLoading = false;
            StateHasChanged();
        }
    }

    // Allan
    private async Task DeleteImage(int imageId)
    {
        try
        {
            var response = await PropertyImageService.DeletePropertyImage(imageId);

            if (response.Success)
            {
                ShowNotification("Bilden har raderats", "success");
                await LoadImages();
            }
            else
            {
                ShowNotification(response.Message ?? "Fel vid borttagning av bild", "error");
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"Error: {ex.Message}", "error");
        }
    }

    // Allan
    private void ShowNotification(string message, string type)
    {
        notificationMessage = message;

        notificationClass = type.ToLower() switch
        {
            "success" => "alert-success",
            "error" => "alert-danger",
            "danger" => "alert-danger",
            "info" => "alert-info",
            "warning" => "alert-warning",
            _ => "alert-info"
        };

        notificationTimer?.Dispose();

        notificationTimer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                notificationMessage = null;
                StateHasChanged();
            });
        }, null, 5000, Timeout.Infinite);

        StateHasChanged();
    }

    // Allan
    private void GoBack()
    {
        NavigationManager.NavigateTo($"/property/details/{MarketPropertyId}");
    }

    // Allan
    public void Dispose()
    {
        notificationTimer?.Dispose();
    }
}