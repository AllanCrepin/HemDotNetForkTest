@page "/property/details/{MarketPropertyId:int}"
@inject IMarketPropertyService propertyService
@inject IPropertyImageService propertyImageService
@inject NavigationManager navigationManager
@inject HttpClient httpClient
@using Microsoft.AspNetCore.WebUtilities

@* Author: Johan *@

<style>
    .carousel-wrapper {
        display: flex;
        justify-content: center; /* Centers the carousel horizontally */
        margin-bottom: 30px;
    }

    .image-carousel {
        max-width: 600px; /* Limits total width */
        width: 100%;
    }

    .image-carousel {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        margin-bottom: 15px;
        position: relative;
        height: 200px;
    }

    .property-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }
</style>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">
        @successMessage
    </div>
}
@if (marketProperty == null)
{
    <p>Loading property details...</p>
}
else
{
    <div class="property-details-container">
        <!-- Hero Image Carousel -->
        <div class="carousel-wrapper">
            @* <div class="col-md-4 col-lg-3"> *@
                <div class="image-carousel">
                    @foreach (var image in images)
                    {
                        <img src="@($"{httpClient.BaseAddress}{image.ImageUrl}")" class="property-image" alt="Property image" />
                    }
                </div>
            @* </div> *@
        </div>

        <!-- Property Summary -->
        <div class="property-summary">
            <h1>@marketProperty.Price.ToString("C")</h1>
            <p>@marketProperty.AmountOfRooms rooms | @marketProperty.LivingArea m² | @marketProperty.PropertyAddress, @marketProperty.MunicipalityName</p>
        </div>

        <!-- Detailed Description -->
        <div class="property-description">
            <h2>Description</h2>
            <p>@marketProperty.Description</p>
        </div>

        <!-- Additional Information -->
        <div class="additional-info">
            <h2>Additional Information</h2>
            <ul>
                <li>Construction Year: @marketProperty.ContructionYear</li>
                <li>Ancillary Area: @marketProperty.AncillaryArea m²</li>
                <li>Lot Area: @marketProperty.LotArea m²</li>
                <li>Monthly Fee: @(marketProperty.MonthlyFee.HasValue ? marketProperty.MonthlyFee.Value.ToString("C") : "N/A")</li>
                <li>Yearly Maintenance Cost: @(marketProperty.YearlyMaintenanceCost.HasValue ? marketProperty.YearlyMaintenanceCost.Value.ToString("C") : "N/A")</li>
            </ul>
        </div>

        <!-- Contact Information -->
        <div class="contact-info">
            <h2>Contact</h2>
            <p>Real Estate Agent: @marketProperty.RealEstateAgentFullName</p>
            <!-- Add contact form or links as needed -->
        </div>
    </div>
}

@code {
    [Parameter] public int MarketPropertyId { get; set; }
    private Response<MarketPropertyDetailsDto>? responseProperty;
    private MarketPropertyDetailsDto marketProperty;
    private Response<List<PropertyImageDto>>? responseImages;
    private List<PropertyImageDto> images;
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        responseProperty = await propertyService.GetMarketPropertyById(MarketPropertyId);
        marketProperty = responseProperty.Data;

        responseImages = await propertyImageService.GetPropertyImages(MarketPropertyId);
        images = responseImages.Data;

        // LoadProperty();
        // LoadImages();

        HandleSuccessMessage();
    }

    private void HandleSuccessMessage()
    {
        //If user is redirected after a Create action, display the successMessage passed in the url.
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("successMessage", out var message))
        {
            successMessage = message;

            var cleanUri = uri.GetLeftPart(UriPartial.Path);
            navigationManager.NavigateTo(cleanUri, forceLoad: false);
        }
    }

    // private async void LoadProperty()
    // {
    //     responseProperty = await propertyService.GetMarketPropertyById(MarketPropertyId);
    //     marketProperty = responseProperty.Data;
    // }

    // private async void LoadImages()
    // {
    //     var responseImages = await propertyImageService.GetPropertyImages(MarketPropertyId);

    //     if (responseImages.Success)
    //     {
    //         images = responseImages.Data;
    //     }
    //     else
    //     {
    //         errorMessage = "Bara inloggade användare som har tillgång till objektet får lägga till eller ta bort bilder.";
    //     }
    // }

    // private void GoBack()
    // {
    //     navigationManager.NavigateTo("/property/list");
    // }

}
