// <auto-generated />
using System;
using HemDotNetWebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HemDotNetWebApi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250423130346_SeededDefaultUsersAndRoles")]
    partial class SeededDefaultUsersAndRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HemDotNetWebApi.Models.MarketProperty", b =>
                {
                    b.Property<int>("MarketPropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarketPropertyId"));

                    b.Property<int>("AmountOfRooms")
                        .HasColumnType("int");

                    b.Property<double>("AncillaryArea")
                        .HasColumnType("float");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("ContructionYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<double>("LivingArea")
                        .HasColumnType("float");

                    b.Property<double>("LotArea")
                        .HasColumnType("float");

                    b.Property<decimal?>("MonthlyFee")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MunicipalityId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealEstateAgentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("YearlyMaintenanceCost")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MarketPropertyId");

                    b.HasIndex("MunicipalityId");

                    b.HasIndex("RealEstateAgentId");

                    b.ToTable("MarketProperties");
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.Municipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MunicipalityId"));

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("MunicipalityId");

                    b.ToTable("Municipalities");
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.PropertyImage", b =>
                {
                    b.Property<int>("PropertyImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyImageId"));

                    b.Property<int>("MarketPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyImageId");

                    b.HasIndex("MarketPropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.RealEstateAgency", b =>
                {
                    b.Property<int>("RealEstateAgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealEstateAgencyId"));

                    b.Property<string>("RealEstateAgencyLogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealEstateAgencyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RealEstateAgencyPresentation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RealEstateAgencyId");

                    b.ToTable("RealEstateAgencies");
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.RealEstateAgent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("RealEstateAgency")
                        .HasColumnType("int");

                    b.Property<string>("RealEstateAgentEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealEstateAgentFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("RealEstateAgentId")
                        .HasColumnType("int");

                    b.Property<string>("RealEstateAgentImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RealEstateAgentLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RealEstateAgentPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RealEstateAgency");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a7d64e4d-a8e6-40da-a431-e75fd59ecbdb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8e8dca8-0eb6-41d5-b18f-33189ce94b14",
                            Email = "user@hemdotnet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@HEMDOTNET.SE",
                            NormalizedUserName = "USER@HEMDOTNET.SE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGSwuOcO2xQlCnNl5CT7bG6UGEtAIpmTPWmXd/hGaMx1jbMgZT7MCsIrA6LZM7GBJg==",
                            PhoneNumberConfirmed = false,
                            RealEstateAgentEmail = "anna@nordichomes.com",
                            RealEstateAgentFirstName = "Anna",
                            RealEstateAgentId = 0,
                            RealEstateAgentImageUrl = "/images/RealEstateAgentWoman.jpg",
                            RealEstateAgentLastName = "Svensson",
                            RealEstateAgentPhoneNumber = "+46 70 123 45 67",
                            SecurityStamp = "81199af2-392d-47a3-a10d-94715f273d97",
                            TwoFactorEnabled = false,
                            UserName = "user@hemdotnet.se"
                        },
                        new
                        {
                            Id = "bca74173-1e33-41e8-88df-5a6454c4f900",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "566faf97-1fb3-47a2-b80a-15f140500d58",
                            Email = "admin@hemdotnet.se",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@HEMDOTNET.SE",
                            NormalizedUserName = "ADMIN@HEMDOTNET.SE",
                            PasswordHash = "AQAAAAIAAYagAAAAEL60/seSnvMJZDuzy71Ei2RIO4YXCNIm3oiz+54ZNBT6z9SJm6iAijUQQwerphQCxw==",
                            PhoneNumberConfirmed = false,
                            RealEstateAgentEmail = "mikael@nordichomes.com",
                            RealEstateAgentFirstName = "Mikael",
                            RealEstateAgentId = 0,
                            RealEstateAgentImageUrl = "/images/RealEstateAgentMan.jpg",
                            RealEstateAgentLastName = "Strand",
                            RealEstateAgentPhoneNumber = "+46 70 123 45 67",
                            SecurityStamp = "baffd57d-b3c6-4a6e-a2be-b0513e147922",
                            TwoFactorEnabled = false,
                            UserName = "admin@hemdotnet.se"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c0ef899a-9033-4d98-9851-cf7c051cc51d",
                            Name = "User",
                            NormalizedName = "User"
                        },
                        new
                        {
                            Id = "24f60ffc-3f16-4815-83b0-bf191748018c",
                            Name = "Administator",
                            NormalizedName = "Administator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a7d64e4d-a8e6-40da-a431-e75fd59ecbdb",
                            RoleId = "c0ef899a-9033-4d98-9851-cf7c051cc51d"
                        },
                        new
                        {
                            UserId = "bca74173-1e33-41e8-88df-5a6454c4f900",
                            RoleId = "24f60ffc-3f16-4815-83b0-bf191748018c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.MarketProperty", b =>
                {
                    b.HasOne("HemDotNetWebApi.Models.Municipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HemDotNetWebApi.Models.RealEstateAgent", "RealEstateAgent")
                        .WithMany("RealEstateAgentProperties")
                        .HasForeignKey("RealEstateAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("RealEstateAgent");
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.PropertyImage", b =>
                {
                    b.HasOne("HemDotNetWebApi.Models.MarketProperty", "MarketProperty")
                        .WithMany("Images")
                        .HasForeignKey("MarketPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketProperty");
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.RealEstateAgent", b =>
                {
                    b.HasOne("HemDotNetWebApi.Models.RealEstateAgency", "RealEstateAgentAgency")
                        .WithMany()
                        .HasForeignKey("RealEstateAgency");

                    b.Navigation("RealEstateAgentAgency");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HemDotNetWebApi.Models.RealEstateAgent", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HemDotNetWebApi.Models.RealEstateAgent", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HemDotNetWebApi.Models.RealEstateAgent", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HemDotNetWebApi.Models.RealEstateAgent", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.MarketProperty", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("HemDotNetWebApi.Models.RealEstateAgent", b =>
                {
                    b.Navigation("RealEstateAgentProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
